const mysql = require('mysql2/promise');
require('dotenv').config();

const pool = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: process.env.DB_PORT
});

async function setup() {
    await pool.query(`
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            fullname VARCHAR(100) NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password VARCHAR(100) NOT NULL
        )
    `);

    await pool.query(`
        CREATE TABLE IF NOT EXISTS emails (
        id INT AUTO_INCREMENT PRIMARY KEY,
        sender_id INT NOT NULL,
        receiver_id INT NOT NULL,
        subject VARCHAR(255),    
        body TEXT,
        attachment VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        isDeletedBySender INT DEFAULT 0,
        isDeletedByReceiver INT DEFAULT 0,
        FOREIGN KEY (sender_id) REFERENCES users(id),
        FOREIGN KEY (receiver_id) REFERENCES users(id)
        )
    `);

    await pool.query(`
        INSERT IGNORE INTO users (fullname, email, password) VALUES 
        ('üê∑ <3', 'a@a.com', '123'),
        ('Thangbodoiqua', 'dluy2406@gmail.com', '123'),
        ('Nguyen Dinh Thang', 'dinhthang2k04@gmail.com', '123'),
        ('Hoang Tu Ech üê∏', 'HoangTuEch@gmail.com', '123')`
    );

    const [users] = await pool.query('SELECT id, fullname FROM users');

    const emails = [
        { sender_id: users[0].id, receiver_id: users[1].id, subject: `from ${users[0].fullname}`, body: `to ${users[1].fullname}` },
        { sender_id: users[1].id, receiver_id: users[0].id, subject: `reply from ${users[1].fullname}`, body: `to answer ${users[0].fullname}` },
        { sender_id: users[0].id, receiver_id: users[2].id, subject: `from ${users[0].fullname}`, body: `to ${users[2].fullname}` },
        { sender_id: users[2].id, receiver_id: users[0].id, subject: `reply from ${users[2].fullname}`, body: `to answer ${users[0].fullname}` },
        { sender_id: users[1].id, receiver_id: users[2].id, subject: `from ${users[1].fullname}`, body: `to ${users[2].fullname}` },
        { sender_id: users[2].id, receiver_id: users[1].id, subject: `reply from ${users[2].fullname}`, body: `to answer ${users[1].fullname}` },
        { sender_id: users[0].id, receiver_id: users[1].id, subject: `from ${users[0].fullname}`, body: `to ${users[1].fullname}` },
        { sender_id: users[1].id, receiver_id: users[0].id, subject: `reply from ${users[1].fullname}`, body: `to answer ${users[0].fullname}`},
        { sender_id: users[0].id, receiver_id: users[1].id, subject: `B√†i th∆° Y√™u ƒë·ªùi`, body:
            `ƒê√™m qua m∆∞a th·∫≠t l√† to\nTrƒÉng sao ∆∞·ªõt h·∫øt t·ªëi m√≤ bu·ªìn gh√™\nS√°ng nay tr·ªùi v·ªôi tr·ªü v·ªÅ\nChi·∫øu mu√¥n tia n·∫Øng tr√™n ƒë√™ trong l√†ng\n\n` +
            `B·∫ßy chim m·ª´ng r·ª° h√≥t vang\nV∆∞·ªùn hoa tr∆∞·ªõc ng√µ b∆∞·ªõm v√†ng nh·ªün nh∆°\nM·∫π em ph∆°i l·ª•a h·ªìng t∆°\nNg·∫Øm m√¢y em vi·∫øt b√†i th∆° y√™u ƒë·ªùi\n` +
            `N·∫Øng h√≤a m∆∞a thu·∫≠n kh·∫Øp n∆°i\nEm m∆° em ∆∞·ªõc m·ªçi ng∆∞·ªùi ·∫•m no.\n\n(Nguy·ªÖn H·ªØu B√†o)` 
        },
        { sender_id: users[1].id, receiver_id: users[0].id, subject:"B√†i th∆° S·ªëng th·∫≠t l√† s·ªëng h·∫°nh ph√∫c", body: 
            `L√†m ng∆∞·ªùi ph·∫£i s·ªëng th·∫≥ng ngay\nƒê·ª´ng nh∆∞ con b∆∞·ªõm ƒë·∫≠u bay v√¥ t√¨nh.\nS·ªëng sao th·∫≠t v·ªõi l√≤ng m√¨nh\n` +
            `ƒê√£ h·ª©a h·∫πn ph·∫£i ƒëinh ninh gi·ªØ l·ªùi.\n\n(Nguy·ªÖn Th·ªã Th·∫Øm)`
        },
        { sender_id: users[0].id, receiver_id: users[3].id, subject: "B√†i th∆° Con ·∫æch", body:
            `·∫æch ng·ªìi ƒë√°y gi·∫øng ng·∫Øm tr·ªùi\nK√™u ca om s√≥m su·ªët ƒë·ªùi kh√¥ng th√¥i\nTr·ªùi xanh ch·ªâ m·ªôt m·∫£nh th√¥i\n` +
            `C·ª© ng·ª° t·∫•t c·∫£ ·ªü ƒë·ªùi c√≥ th·∫ø.\n  \n(D√¢n gian)`
        },
        { sender_id: users[1].id, receiver_id: users[3].id, subject: "B√†i th∆° Ao ·∫æch", body:
            `Ao nh√† ƒë·∫ßy n∆∞·ªõc trong veo\nƒê√†n ·∫øch t·∫•u nh·∫°c inh eo m·ªói chi·ªÅu\nC√≤n ƒë√¢u ti·∫øng ·∫øch th√¢n y√™u\n` +
            `Khi ao c·∫°n n∆∞·ªõc, ·∫øch ƒë·ªÅu ra ƒëi.\n\n(S∆∞u t·∫ßm)`
        },
        { sender_id: users[2].id, receiver_id: users[3].id, subject: "Th∆° v·ªÅ ·∫æch", body:
            `·∫æch xanh nh·∫£y nh√≥t b√™n h·ªì\nK√™u vang ·ªôp ·ªôp l√†m cho vui nh√†\nM∆∞a r∆°i ·∫øch h√°t giao h√≤a\n` +
            `Thi√™n nhi√™n t∆∞∆°i ƒë·∫πp th·∫≠t l√† b√¨nh y√™n.\n\n(S∆∞u t·∫ßm)`
        },
        { sender_id: users[3].id, receiver_id: users[0].id, subject: "Th∆∞ t·ª´ Ho√†ng T·ª≠ ·∫æch", body:
            `Ch√†o b·∫°n th√¢n m·∫øn,\nT√¥i l√† Ho√†ng T·ª≠ ·∫æch ƒë√¢y. T√¥i r·∫•t vui ƒë∆∞·ª£c l√†m quen v·ªõi b·∫°n. Ao c·ªßa t√¥i lu√¥n r·ªông m·ªü ƒë√≥n ch√†o b·∫°n gh√© thƒÉm.` 
        },
        { sender_id: users[3].id, receiver_id: users[1].id, subject: "L·ªùi m·ªùi t·ª´ Ho√†ng T·ª≠ ·∫æch", body:
            `Th√¢n g·ª≠i b·∫°n,\nT·ªëi nay t√¥i t·ªï ch·ª©c m·ªôt bu·ªïi h√≤a nh·∫°c ·∫øch ·ªü ao l√†ng. R·∫•t mong b·∫°n ƒë·∫øn tham d·ª±. S·∫Ω c√≥ nhi·ªÅu b·∫£n nh·∫°c hay l·∫Øm ƒë·∫•y!`
        },
        { sender_id: users[3].id, receiver_id: users[2].id, subject: "Chia s·∫ª t·ª´ Ho√†ng T·ª≠ ·∫æch", body:
            `N√†y b·∫°n ∆°i,\nCu·ªôc s·ªëng ·ªü ao l√†ng th·∫≠t tuy·ªát. M·ªói t·ªëi ch√∫ng t√¥i l·∫°i h·ªçp nhau h√°t nh·ªØng b√†i ca vui nh·ªôn. B·∫°n c√≥ mu·ªën tham gia kh√¥ng?`
        }
    ];

    for (const email of emails) {
        await pool.query(`INSERT INTO emails (sender_id, receiver_id, subject, body, isDeletedBySender, isDeletedByReceiver) VALUES (?, ?, ?, ?, 0, 0)`, 
            [email.sender_id, email.receiver_id, email.subject, email.body]);
    }
}

if (require.main === module) {// ch·∫°y file n√†y th√¨ m·ªõi ch·∫°y h√†m setup
    //n·∫øu ko c√≥ ƒëi·ªÅu ki·ªán n√†y th√¨ khi import file n√†y v√†o file kh√°c, h√†m setup s·∫Ω ch·∫°y lu√¥n

    setup()
        .then(() => {
            console.log("Setup completed");
        })
        .catch((error) => console.error("Dbsetup failed", error))
        .finally(() => pool.end());// ƒë√≥ng k·∫øt n·ªëi, ƒë·ª° ph·∫£i ·∫•n ctrl + c ƒë·ªÉ t·∫Øt ·ªü cmd
}

module.exports = { pool };